{"version":3,"sources":["redux/contacts/contacts-action.js","redux/contacts/contacts-data.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selectors.js","Components/Filter/Filter.js","Components/ContactListItem/ContactListItem.js","Components/ContactList/ContactList.js","Components/ContactForm/ContactForm.js","Components/Phonebook/Phonebook.js","App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","getContact","createAsyncThunk","_","a","rejectWithValue","axios","get","data","toast","success","error","addContact","contact","post","deleteContact","id","delete","editContact","name","phone","put","filterContact","createAction","initialData","contacts","items","filter","createReducer","actions","fulfilled","payload","state","element","map","contactsReducer","combineReducers","rootReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","devTools","process","getContacts","getFilter","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","includes","trim","FormItem","styled","label","FormInput","input","FormHeading","h3","connect","value","dispatch","onChange","event","target","type","ItemWrapper","div","ContactInfo","p","ContactName","span","ContactNumber","DeleteButton","button","onDeleteContact","contactId","onClick","List","ul","FormWrapper","form","FormLabel","FormTitle","FormButton","ContactForm","number","changeState","currentTarget","setState","contactSubmit","preventDefault","filterName","props","find","alert","reset","onAddContact","this","onSubmit","pattern","title","required","Component","Wrapper","Heading","h1","SubHeading","h2","Container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c50f6f47.chunk.js","sourcesContent":["import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\nconst BASE_URL = 'https://61fdf15aa58a4e00173c96bd.mockapi.io/my-api/contacts';\n\nexport const getContact = createAsyncThunk(\n  'contact/get',\n  async (_, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.get(BASE_URL);\n      toast.success('Contacts loaded successfully!');\n      return data;\n    } catch (error) {\n      toast.error(`${error}`);\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const addContact = createAsyncThunk(\n  'contact/add',\n  async (contact, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.post(BASE_URL, contact);\n      toast.success('Contact added successfully!');\n      return data;\n    } catch (error) {\n      toast.error(`${error}`);\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contact/delete',\n  async (id, { rejectWithValue }) => {\n    try {\n      await axios.delete(BASE_URL + `/${id}`);\n      toast.success('Contact deleted successfully!');\n      return id;\n    } catch (error) {\n      toast.error(`${error}`);\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const editContact = createAsyncThunk(\n  'contact/edit',\n  async ({ id, name, phone }, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.put(BASE_URL + `/${id}`, {\n        name,\n        phone,\n      });\n      toast.success('Contact changed successfully!');\n      return data;\n    } catch (error) {\n      toast.error(`${error}`);\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const filterContact = createAction('contact/Filter');\n","const initialData = {\n  contacts: {\n    items: [],\n    filter: '',\n  },\n};\n\nexport default initialData;\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport * as actions from './contacts-action';\nimport initialData from './contacts-data';\n\nconst items = createReducer(initialData.contacts.items, {\n  [actions.getContact.fulfilled]: (_, { payload }) => payload,\n  [actions.addContact.fulfilled]: (state, { payload }) => [payload, ...state],\n  [actions.deleteContact.fulfilled]: (state, { payload }) =>\n    state.filter(element => element.id !== payload),\n  [actions.editContact.fulfilled]: (state, { payload }) =>\n    state.map(element => (element.id === payload.id ? payload : element)),\n});\n\nconst filter = createReducer(initialData.contacts.filter, {\n  [actions.filterContact]: (_, { payload }) => payload,\n});\n\nexport const contactsReducer = combineReducers({\n  items: items,\n  filter: filter,\n});\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport { contactsReducer } from './contacts/contacts-reducer';\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware(),\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.loading;\nexport const getError = state => state.error;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(element =>\n      element.name.toLowerCase().includes(normalizedFilter.trim()),\n    );\n  },\n);\n","import { connect } from 'react-redux';\nimport * as actions from '../../redux/contacts/contacts-action';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst FormItem = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  font-weight: 600;\n  color: black;\n`;\n\nconst FormInput = styled.input`\n  width: 200px;\n  border-radius: 3px;\n  border: solid 2px black;\n  margin-bottom: 20px;\n\n  :focus {\n    outline: none;\n    box-shadow: 0px 0px 1px 1px blue;\n    border: solid 1px black;\n  }\n`;\n\nconst FormHeading = styled.h3`\n  margin-bottom: 10px;\n`;\n\nconst Filter = ({ value, onChange }) => (\n  <FormItem>\n    <FormHeading>Find contacts by name</FormHeading>\n    <FormInput type=\"text\" value={value} onChange={onChange} />\n  </FormItem>\n);\n\nconst mapStateToProps = state => {\n  return {\n    value: getFilter(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onChange: event => dispatch(actions.filterContact(event.target.value)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contacts-action';\nimport styled from 'styled-components';\n\nconst ItemWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n`;\n\nconst ContactInfo = styled.p`\n  margin-right: 25px;\n`;\n\nconst ContactName = styled.span`\n  margin-right: 15px;\n`;\n\nconst ContactNumber = styled.span`\n  font-style: italic;\n`;\n\nconst DeleteButton = styled.button`\n  padding: 2px 4px;\n  width: 100px;\n\n  cursor: pointer;\n  color: black;\n  border: solid 1px black;\n  background-color: white;\n  border-radius: 4px;\n\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.475;\n  align-items: center;\n  text-align: center;\n\n  :hover {\n    color: white;\n    background-color: red;\n  }\n`;\n\nconst ContactListItem = ({ contact, onDeleteContact }) => {\n  return (\n    <ItemWrapper>\n      <ContactInfo>\n        <ContactName>{contact.name}</ContactName>\n        <ContactNumber>{contact.phone}</ContactNumber>\n      </ContactInfo>\n      <DeleteButton onClick={() => onDeleteContact(contact.id)}>\n        Delete\n      </DeleteButton>\n    </ItemWrapper>\n  );\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDeleteContact: contactId => dispatch(deleteContact(contactId)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ContactListItem);\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }),\n\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\n\nconst List = styled.ul`\n  width: 400px;\n`;\n\nconst ContactList = ({ contacts }) => (\n  <List>\n    {contacts.map(contact => (\n      <li key={contact.id}>\n        <ContactListItem contact={contact} />\n      </li>\n    ))}\n  </List>\n);\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getFilteredContacts(state),\n  };\n};\n\nexport default connect(mapStateToProps, null)(ContactList);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-action';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst FormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 30px 30px;\n\n  margin-bottom: 20px;\n  border: solid 1px black;\n  border-radius: 5px;\n`;\n\nconst FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n\n  font-weight: 600;\n  color: black;\n`;\n\nconst FormTitle = styled.h3`\n  margin-bottom: 10px;\n`;\n\nconst FormInput = styled.input`\n  border-radius: 3px;\n  border: solid 2px black;\n  :focus {\n    outline: none;\n    box-shadow: 0px 0px 3px 3px blue;\n    border: solid 1px black;\n  }\n`;\n\nconst FormButton = styled.button`\n  padding: 2px 4px;\n  width: 120px;\n\n  cursor: pointer;\n  color: black;\n  background-color: white;\n  border-radius: 4px;\n  border: solid 1px black;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 1.875;\n  align-items: center;\n  text-align: center;\n\n  :hover {\n    color: white;\n    background-color: lightgreen;\n  }\n`;\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n    id: '',\n  };\n\n  changeState = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  contactSubmit = event => {\n    event.preventDefault();\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n    const filterName = this.state.name;\n\n    if (\n      this.props.contacts.find(\n        contact => contact.name.toLowerCase() === filterName.toLowerCase(),\n      )\n    ) {\n      alert(`${filterName} is already in contacts`);\n      this.reset();\n      return;\n    }\n\n    this.props.onAddContact(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <FormWrapper onSubmit={this.contactSubmit}>\n        <FormLabel>\n          <FormTitle>Name</FormTitle>\n          <FormInput\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={this.changeState}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </FormLabel>\n        <FormLabel>\n          <FormTitle>Number</FormTitle>\n          <FormInput\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={this.changeState}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </FormLabel>\n        <FormButton type=\"submit\">Add contact</FormButton>\n      </FormWrapper>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getContacts(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddContact: ({ name, number }) => dispatch(addContact({ name, number })),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n","import { connect } from 'react-redux';\nimport { getContact } from '../../redux/contacts/contacts-action';\nimport styled from 'styled-components';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\nimport ContactForm from '../ContactForm/ContactForm';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: venter;\n  margin-bottom: 30px;\n\n  :last-child {\n    margin-bottom: 0px;\n  }\n`;\n\nconst Heading = styled.h1`\n  margin-bottom: 20px;\n  font-size: 36px;\n  text-align: center;\n`;\n\nconst SubHeading = styled.h2`\n  margin-bottom: 20px;\n  font-size: 30px;\n  text-align: center;\n`;\n\nconst Phonebook = ({ getContact }) => {\n  getContact();\n  return (\n    <Wrapper>\n      <Heading>Phonebook</Heading>\n      <ContactForm />\n      <SubHeading>Contacts</SubHeading>\n      <Filter />\n      <ContactList />\n    </Wrapper>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getContact: () => dispatch(getContact()),\n});\n\nexport default connect(null, mapDispatchToProps)(Phonebook);\n","import styled from 'styled-components';\nimport Phonebook from './Components/Phonebook/Phonebook';\n\nconst Container = styled.div`\n  margin: 0 auto;\n  padding: 0 15px;\n  width: 430px;\n`;\n\nfunction App() {\n  return (\n    <Container>\n      <Phonebook />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}